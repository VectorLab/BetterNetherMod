buildscript {
	repositories {
		maven { url = 'https://maven.minecraftforge.net/' }
		mavenCentral()
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
	}
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'



version = "1.12.2-0.1.8.6-1"
group = "com.craftorio.betternether"
archivesBaseName = "betternether"

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
	sourceCompatibility = targetCompatibility = '1.8'
}

repositories {
//	flatDir {
//		dirs 'libs'
//	}
}

minecraft {
	mappings channel: 'snapshot', version: '20171003-1.12'

	runs {
		client {
			workingDirectory project.file('run')

			// Recommended logging data for a userdev environment
			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

			// Recommended logging level for the console
			property 'forge.logging.console.level', 'debug'
		}

		server {

			// Recommended logging data for a userdev environment
			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

			// Recommended logging level for the console
			property 'forge.logging.console.level', 'debug'
		}
	}
}

dependencies {
	minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2859'
	compile fileTree(dir: 'libs', include: ['*.jar'])
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
	manifest {
		attributes([
			"Specification-Title": "Better Nether",
			"Specification-Vendor": "paulevs",
			"Specification-Version": "${version}", // We are version 1 of ourselves
			"Implementation-Title": "betternether",
			"Implementation-Version": "${version}",
			"Implementation-Vendor" :"paulevs",
			"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
task deobfJar(type: Jar) {
        from sourceSets.main.output
        classifier = 'deobf'
}

jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifacts {
				archives jar
                                archives deobfJar
                        }
		}
	}
	repositories {
		maven {
			url "file:///${project.projectDir}/mcmodsrepo"
		}
	}
}
